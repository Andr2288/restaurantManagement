<?php
// setup.php
// –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É

require_once __DIR__ . '/config/db.php';

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —ñ—Å–Ω—É—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
 */
function checkDatabaseExists($pdo, $dbname)
{
    $stmt = $pdo->query("SHOW DATABASES LIKE '{$dbname}'");
    return $stmt->rowCount() > 0;
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
function getUserConfirmation($message)
{
    echo $message . " (y/n): ";
    $handle = fopen("php://stdin", "r");
    $response = trim(fgets($handle));
    fclose($handle);

    return strtolower($response) === 'y' || strtolower($response) === 'yes';
}

/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
 */
function dropDatabase($pdo, $dbname)
{
    try {
        $pdo->exec("DROP DATABASE IF EXISTS {$dbname}");
        echo "üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{$dbname}' –≤–∏–¥–∞–ª–µ–Ω–∞\n";
        return true;
    } catch (PDOException $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ë–î: " . $e->getMessage() . "\n";
        return false;
    }
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
 */
function createDatabase($pdo, $dbname)
{
    try {
        $pdo->exec("CREATE DATABASE IF NOT EXISTS {$dbname} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
        $pdo->exec("USE {$dbname}");
        echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{$dbname}' —Å—Ç–≤–æ—Ä–µ–Ω–∞\n";
        return true;
    } catch (PDOException $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ë–î: " . $e->getMessage() . "\n";
        return false;
    }
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—å
 */
function createSchema($pdo)
{
    try {
        echo "üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...\n";

        $schemaFile = __DIR__ . '/database.schema.sql';
        if (!file_exists($schemaFile)) {
            throw new Exception("–§–∞–π–ª —Å—Ö–µ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {$schemaFile}");
        }

        $schemaScript = file_get_contents($schemaFile);

        // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ USE —Ç–∞ CREATE DATABASE –∑—ñ —Å—Ö–µ–º–∏
        $schemaScript = preg_replace('/^CREATE DATABASE.*$/m', '', $schemaScript);
        $schemaScript = preg_replace('/^USE .*$/m', '', $schemaScript);

        $pdo->exec($schemaScript);
        echo "‚úÖ –°—Ö–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞\n";
        return true;
    } catch (Exception $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ö–µ–º–∏: " . $e->getMessage() . "\n";
        return false;
    }
}

/**
 * –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
 */
function insertTestData($pdo)
{
    try {
        echo "üìã –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...\n";

        $dataFile = __DIR__ . '/fictitious_data.sql';
        if (!file_exists($dataFile)) {
            throw new Exception("–§–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {$dataFile}");
        }

        $dataScript = file_get_contents($dataFile);
        $pdo->exec($dataScript);
        echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–¥–∞–Ω—ñ\n";
        return true;
    } catch (Exception $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: " . $e->getMessage() . "\n";
        return false;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
 */
function showTablesStats($pdo, $dbname)
{
    try {
        echo "\nüìä –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:\n";

        $stmt = $pdo->query("SHOW TABLES FROM {$dbname}");
        $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);

        foreach ($tables as $table) {
            // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
            $countStmt = $pdo->query("SELECT COUNT(*) FROM {$table}");
            $count = $countStmt->fetchColumn();

            echo "   - {$table} ({$count} –∑–∞–ø–∏—Å—ñ–≤)\n";
        }

        echo "\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
        echo "   - –í—Å—å–æ–≥–æ —Ç–∞–±–ª–∏—Ü—å: " . count($tables) . "\n";

        return true;
    } catch (Exception $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " . $e->getMessage() . "\n";
        return false;
    }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
 */
function setupDatabase()
{
    try {
        echo "üè™ –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É...\n\n";

        // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ .env
        $host = getenv('DB_HOST') ?: 'localhost';
        $user = getenv('DB_USER') ?: 'root';
        $password = getenv('DB_PASSWORD') ?: '';
        $dbname = getenv('DB_NAME') ?: 'restaurant_management_db';

        echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n";
        echo "   - –•–æ—Å—Ç: {$host}\n";
        echo "   - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {$user}\n";
        echo "   - –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {$dbname}\n\n";

        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL –±–µ–∑ –≤–∏–±–æ—Ä—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        $pdo = new PDO(
            "mysql:host={$host}",
            $user,
            $password,
            [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4"
            ]
        );

        echo "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MySQL —Å–µ—Ä–≤–µ—Ä–∞\n\n";

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        $databaseExists = checkDatabaseExists($pdo, $dbname);

        if ($databaseExists) {
            echo "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{$dbname}' –≤–∂–µ —ñ—Å–Ω—É—î!\n";

            if (getUserConfirmation("–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É?")) {
                if (!dropDatabase($pdo, $dbname)) {
                    return false;
                }
                echo "\n";
            } else {
                echo "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º\n";
                return false;
            }
        } else {
            echo "‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{$dbname}' –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É...\n";
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        if (!createDatabase($pdo, $dbname)) {
            return false;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ö–µ–º—É
        if (!createSchema($pdo)) {
            return false;
        }

        // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        if (!insertTestData($pdo)) {
            return false;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        showTablesStats($pdo, $dbname);

        echo "\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!\n";
        echo "\nüí° –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n";
        echo "   php -S localhost:8080 -t public/\n";
        echo "   –ê–±–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ: http://localhost:8080/employees\n\n";

        return true;

    } catch (PDOException $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL: " . $e->getMessage() . "\n";
        echo "\nüîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n";
        echo "   - –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π MySQL —Å–µ—Ä–≤–µ—Ä\n";
        echo "   - –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª—ñ .env\n";
        echo "   - –ß–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë–î\n";
        return false;
    } catch (Exception $e) {
        echo "‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: " . $e->getMessage() . "\n";
        return false;
    }
}

/**
 * –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
 */
function testConnection()
{
    echo "üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...\n\n";

    try {
        $database = new Database();
        if ($database->testConnection()) {
            echo "\n‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î! –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.\n";
            return true;
        }
    } catch (Exception $e) {
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: " . $e->getMessage() . "\n";
    }

    return false;
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
if (isset($argv[1])) {
    switch ($argv[1]) {
        case 'test':
            testConnection();
            break;
        case 'setup':
        case 'install':
            setupDatabase();
            break;
        case 'help':
        case '--help':
        case '-h':
            echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n";
            echo "   php setup.php          - –ü–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î\n";
            echo "   php setup.php setup    - –¢–µ —Å–∞–º–µ —â–æ —ñ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤\n";
            echo "   php setup.php test     - –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î\n";
            echo "   php setup.php help     - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n";
            break;
        default:
            echo "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {$argv[1]}\n";
            echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 'php setup.php help' –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥\n";
    }
} else {
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    setupDatabase();
}